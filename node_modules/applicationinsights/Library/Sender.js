///<reference path="..\Declarations\node\node.d.ts" />
var fs = require("fs");
var http = require("http");
var os = require("os");
var path = require("path");
var url = require("url");
var zlib = require("zlib");
var Logging = require("./Logging");
var Sender = (function () {
    function Sender(getUrl, onSuccess, onError) {
        var _this = this;
        this._getUrl = getUrl;
        this._onSuccess = onSuccess;
        this._onError = onError;
        this._enableCacheOnError = false;
        // always begin by trying to send saved data when initialized
        setTimeout(function () { return _this._sendFirstFileOnDisk(); });
    }
    Sender.prototype.send = function (payload, callback) {
        var _this = this;
        var endpointUrl = this._getUrl();
        if (endpointUrl && endpointUrl.indexOf("//") === 0) {
            // use https if the config did not specify a protocol
            endpointUrl = "https:" + endpointUrl;
        }
        // todo: investigate specifying an agent here: https://nodejs.org/api/http.html#http_class_http_agent
        var parsedUrl = url.parse(endpointUrl);
        var options = {
            host: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.pathname,
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }
        };
        zlib.gzip(payload, function (err, buffer) {
            var dataToSend = buffer;
            if (err) {
                Logging.warn(err);
                dataToSend = payload; // something went wrong so send without gzip
                options.headers["Content-Length"] = payload.length;
            }
            else {
                options.headers["Content-Encoding"] = "gzip";
                options.headers["Content-Length"] = buffer.length;
            }
            Logging.info(Sender.TAG, options);
            var req = http.request(options, function (res) {
                res.setEncoding("utf-8");
                //returns empty if the data is accepted
                var responseString = "";
                res.on("data", function (data) {
                    responseString += data;
                });
                res.on("end", function () {
                    Logging.info(Sender.TAG, responseString);
                    if (typeof _this._onSuccess === "function") {
                        _this._onSuccess(responseString);
                    }
                    if (typeof callback === "function") {
                        callback(responseString);
                    }
                    if (_this._enableCacheOnError) {
                        // try to send any cached events if the user is back online
                        if (res.statusCode === 200) {
                            _this._sendFirstFileOnDisk();
                        }
                        else {
                            // cache the payload to send it later
                            _this._storeToDisk(payload);
                        }
                    }
                });
            });
            req.on("error", function (error) {
                // todo: handle error codes better (group to recoverable/non-recoverable and persist)
                Logging.warn(Sender.TAG, error);
                _this._onErrorHelper(error);
                if (typeof callback === "function") {
                    var errorMessage = "error sending telemetry";
                    if (error && (typeof error.toString === "function")) {
                        errorMessage = error.toString();
                    }
                    callback(errorMessage);
                }
                if (_this._enableCacheOnError) {
                    _this._storeToDisk(payload);
                }
            });
            req.write(dataToSend);
            req.end();
        });
    };
    Sender.prototype.saveOnCrash = function (payload) {
        this._storeToDisk(payload, true);
    };
    /**
     * enable caching events locally on error
     */
    Sender.prototype.enableCacheOnError = function () {
        this._enableCacheOnError = true;
    };
    /**
    * disable caching events locally on error
    */
    Sender.prototype.disableCacheOnError = function () {
        this._enableCacheOnError = false;
    };
    /**
     * Stores the payload as a json file on disk in the temp direcotry
     */
    Sender.prototype._storeToDisk = function (payload, isCrash) {
        var _this = this;
        //ensure directory is created
        var direcotry = path.join(os.tmpDir(), Sender.TEMPDIR);
        if (!fs.existsSync(direcotry)) {
            try {
                fs.mkdirSync(direcotry);
            }
            catch (error) {
                // failing to create the temp directory
                this._onErrorHelper(error);
                return;
            }
        }
        //create file - file name for now is the timestamp, a better approach would be a UUID but that
        //would require an external dependency 
        var fileName = new Date().getTime() + ".ai.json";
        var fileFullPath = path.join(direcotry, fileName);
        // if the file already exist, replace the content
        if (isCrash) {
            Logging.info(Sender.TAG, "saving crash to disk at: " + fileFullPath);
            fs.writeFileSync(fileFullPath, payload);
        }
        else {
            Logging.info(Sender.TAG, "saving data to disk at: " + fileFullPath);
            fs.writeFile(fileFullPath, payload, function (error) { return _this._onErrorHelper(error); });
        }
    };
    /**
     * Check for temp telemetry files
     * reads the first file if exist, deletes it and tries to send its load
     */
    Sender.prototype._sendFirstFileOnDisk = function () {
        var _this = this;
        var tempDir = path.join(os.tmpDir(), Sender.TEMPDIR);
        if (!fs.existsSync(tempDir)) {
            return;
        }
        fs.readdir(tempDir, function (error, files) {
            if (!error) {
                files = files.filter(function (f) { return path.basename(f).indexOf(".ai.json") > -1; });
                if (files.length > 0) {
                    var firstFile = files[0];
                    var filePath = path.join(tempDir, firstFile);
                    fs.readFile(filePath, function (error, payload) {
                        if (!error) {
                            // delete the file first to prevent double sending
                            fs.unlink(filePath, function (error) {
                                if (!error) {
                                    _this.send(payload);
                                }
                                else {
                                    _this._onErrorHelper(error);
                                }
                            });
                        }
                        else {
                            _this._onErrorHelper(error);
                        }
                    });
                }
            }
            else {
                _this._onErrorHelper(error);
            }
        });
    };
    Sender.prototype._onErrorHelper = function (error) {
        if (typeof this._onError === "function") {
            this._onError(error);
        }
    };
    Sender.TAG = "Sender";
    Sender.TEMPDIR = "appInsights-node";
    return Sender;
})();
module.exports = Sender;
